// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package reply

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table gf_reply.
type Entity struct {
    Id        uint        `orm:"id,primary" json:"id"`         // 回复ID                                   
    ParentId  uint        `orm:"parent_id"  json:"parent_id"`  // 回复对应的上一级回复ID(没有的话默认为0)  
    Type      string      `orm:"type"       json:"type"`       // 评论类型: question, article, reply       
    TargetId  uint        `orm:"target_id"  json:"target_id"`  // 对应内容ID                               
    UserId    uint        `orm:"user_id"    json:"user_id"`    // 网站用户ID                               
    ZanCount  uint        `orm:"zan_count"  json:"zan_count"`  // 赞                                       
    CaiCount  uint        `orm:"cai_count"  json:"cai_count"`  // 踩                                       
    Title     string      `orm:"title"      json:"title"`      // 回复标题                                 
    Content   string      `orm:"content"    json:"content"`    // 回复内容                                 
    CreatedAt *gtime.Time `orm:"created_at" json:"created_at"` // 创建时间                                 
    UpdatedAt *gtime.Time `orm:"updated_at" json:"updated_at"` //                                          
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}