// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user_detail

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table gf_user_detail.
type Entity struct {
    UserId    uint        `orm:"user_id,primary" json:"user_id"`    // 用户ID                                         
    TrueName  string      `orm:"true_name"       json:"true_name"`  // 真实姓名                                       
    IdNumber  string      `orm:"id_number"       json:"id_number"`  // 身份证号                                       
    City      string      `orm:"city"            json:"city"`       // 城市                                           
    Birth     *gtime.Time `orm:"birth"           json:"birth"`      // 出生日期\n(字符串，例如：1986-10-07 00:00:00)  
    Phone     string      `orm:"phone"           json:"phone"`      // 手机号码                                       
    Qq        string      `orm:"qq"              json:"qq"`         // QQ                                             
    Email     string      `orm:"email"           json:"email"`      // 邮件                                           
    From      string      `orm:"from"            json:"from"`       // 用户来源                                       
    Brief     string      `orm:"brief"           json:"brief"`      // 用户说明                                       
    Remark    string      `orm:"remark"          json:"remark"`     // github 返回                                    
    CreatedAt *gtime.Time `orm:"created_at"      json:"created_at"` //                                                
    UpdatedAt *gtime.Time `orm:"updated_at"      json:"updated_at"` //                                                
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}