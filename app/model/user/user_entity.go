// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table gf_user.
type Entity struct {
    Id        uint        `orm:"id,primary" json:"id"`         // UID                                                                 
    RoleId    uint        `orm:"role_id"    json:"role_id"`    // 角色ID，允许负数：< 0 系统使用; > 0 业务使用. 一个用户只有一个角色  
    Passport  string      `orm:"passport"   json:"passport"`   // 账号                                                                
    Password  string      `orm:"password"   json:"password"`   // MD5密码                                                             
    Nickname  string      `orm:"nickname"   json:"nickname"`   // 昵称                                                                
    Avatar    string      `orm:"avatar"     json:"avatar"`     // 头像地址                                                            
    Status    int         `orm:"status"     json:"status"`     // 状态 0:启用 1:禁用                                                  
    Gender    int         `orm:"gender"     json:"gender"`     // 性别 0: 未设置 1: 男 2: 女                                          
    CreatedAt *gtime.Time `orm:"created_at" json:"created_at"` // 注册时间                                                            
    UpdatedAt *gtime.Time `orm:"updated_at" json:"updated_at"` // 更新时间                                                            
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}