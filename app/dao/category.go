// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package dao

import (
	"focus/app/dao/internal"
	"focus/app/model"
	"github.com/gogf/gf/util/gconv"
)

// categoryDao is the manager for logic model data accessing
// and custom defined data operations functions management. You can define
// methods on it to extend its functionality as you wish.
type categoryDao struct {
	*internal.CategoryDao
}

var (
	// Category is globally public accessible object for table {TplTableName} operations.
	Category = &categoryDao{
		internal.Category,
	}
)

// 查询列表
func (d *categoryDao) GetList(r *model.CategoryDaoGetListReq) ([]*model.CategoryItem, error) {
	m := d.Where(d.Columns.ContentType, r.ContentType)
	if r.ParentId > 0 {
		m = m.Where(d.Columns.ParentId, r.ParentId)
	}
	m = m.Order(d.Columns.Sort, "ASC")
	// 查询数据
	all, err := m.All()
	if err != nil {
		return nil, err
	}
	// 结构体转换
	list := make([]*model.CategoryItem, len(all))
	for i, v := range all {
		list[i], err = d.entityToItem(v)
		if err != nil {
			return nil, err
		}
	}
	return list, nil
}

// 查询详情
func (d *categoryDao) GetItem(id uint) (*model.CategoryItem, error) {
	entity, err := d.FindOne(id)
	if err != nil {
		return nil, err
	}
	return d.entityToItem(entity)
}

// 将ORM Entity装换为Item对象返回
func (d *categoryDao) entityToItem(entity *model.Category) (*model.CategoryItem, error) {
	if entity == nil {
		return nil, nil
	}
	item := &model.CategoryItem{}
	if err := gconv.Struct(entity, item); err != nil {
		return nil, err
	}
	return item, nil
}
